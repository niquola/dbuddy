{
  "name": "@niquola/tsql",
  "version": "0.0.3",
  "description": "TypeScript SQL library",
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "bin": {
    "tsql-generate": "./bin/generate.js"
  },
  "scripts": {
    "build": "tsup src/index.ts --format cjs,esm --dts && tsup src/generator.ts --format cjs && tsup src/cli.ts --format cjs",
    "dev": "tsup src/index.ts --format cjs,esm --dts --watch",
    "test": "vitest run",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "typecheck": "tsc --noEmit",
    "generate": "npx tsx src/generator.ts",
    "generate:types": "npx tsx src/generator.ts ./generated",
    "init-sql": "npx tsx scripts/init-sql.ts",
    "prepublishOnly": "npm run lint && npm run typecheck && npm run test:run && npm run build",
    "release": "npm version patch && npm publish",
    "release:minor": "npm version minor && npm publish",
    "release:major": "npm version major && npm publish",
    "test:playground": "npm run test:playground:setup && echo '\\n✅ Test playground created in ./tmp/playground\\n📦 Package @niquola/tsql@latest installed\\n🧪 Test ESM: cd tmp/playground && node test.mjs\\n🧪 Test CJS: cd tmp/playground && node test.cjs\\n🧹 Clean up: npm run test:playground:clean\\n'",
    "test:playground:setup": "npm run test:playground:create-files && cd tmp/playground && npm init -y && npm pkg set type=module && npm install @niquola/tsql@latest",
    "test:playground:create-files": "rm -rf tmp/playground && mkdir -p tmp/playground && cp .env* tmp/playground/ 2>/dev/null || true && echo '# @niquola/tsql Testing Playground\\n\\nThis playground allows you to test the published package locally.\\n\\n## Available Tests\\n\\n- `node test.cjs` - CommonJS test (recommended)\\n- `node test.mjs` - ESM test (may have bundling issues with pg dependency)\\n\\n## Package Exports\\n\\nThe package exports:\\n- `Database` - Main database class\\n- `QueryBuilder` - Query building utilities\\n- `createQueryBuilder` - Factory function\\n- `getDatabaseConfig` - Configuration utilities\\n- `getDatabaseUrl` - URL utilities\\n\\n## Example Usage\\n\\n```javascript\\nconst { Database } = require(\"@niquola/tsql\");\\n\\n// Create database instance\\nconst db = new Database({ connectionString: \"your-connection-string\" });\\n```\\n' > tmp/playground/README.md && echo '// ESM Test - Dynamic import testing\\nconsole.log(\"🧪 Testing @niquola/tsql package (ESM)\")\\n\\ntry {\\n  const { Database } = await import(\"@niquola/tsql\")\\n  console.log(\"🔧 Database class:\", typeof Database)\\n  \\n  if (typeof Database === \"function\") {\\n    console.log(\"✅ Database class is available\")\\n  } else {\\n    console.log(\"❌ Database class not found\")\\n  }\\n  \\n  const tsql = await import(\"@niquola/tsql\")\\n  console.log(\"📦 Package exports:\", Object.keys(tsql))\\n  \\n} catch (error) {\\n  console.log(\"❌ ESM import failed:\", error.message)\\n  console.log(\"💡 This might be due to CommonJS dependencies in the bundle\")\\n  console.log(\"💡 Use CommonJS version: node test.cjs\")\\n}' > tmp/playground/test.mjs && echo 'const tsql = require(\"@niquola/tsql\");\\nconst { Database, QueryBuilder, createQueryBuilder } = require(\"@niquola/tsql\");\\n\\nconsole.log(\"🧪 Testing @niquola/tsql package (CommonJS)\");\\nconsole.log(\"📦 Package exports:\", Object.keys(tsql));\\nconsole.log(\"🔧 Database class:\", typeof Database);\\nconsole.log(\"🔧 QueryBuilder class:\", typeof QueryBuilder);\\nconsole.log(\"🔧 createQueryBuilder function:\", typeof createQueryBuilder);\\n\\nif (typeof Database === \"function\") {\\n  console.log(\"✅ Database class is available\");\\n} else {\\n  console.log(\"❌ Database class not found\");\\n}\\n\\n// Test QueryBuilder\\nif (typeof createQueryBuilder === \"function\") {\\n  console.log(\"✅ createQueryBuilder function is available\");\\n  try {\\n    const qb = createQueryBuilder();\\n    console.log(\"✅ QueryBuilder instance created successfully\");\\n  } catch (error) {\\n    console.log(\"⚠️  QueryBuilder creation failed:\", error.message);\\n  }\\n} else {\\n  console.log(\"❌ createQueryBuilder function not found\");\\n}' > tmp/playground/test.cjs",
    "test:playground:clean": "rm -rf tmp"
  },
  "keywords": [
    "typescript",
    "sql",
    "database"
  ],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "@types/node": "^20.10.0",
    "@types/pg": "^8.10.9",
    "@typescript-eslint/eslint-plugin": "^6.13.0",
    "@typescript-eslint/parser": "^6.13.0",
    "@vitest/coverage-v8": "^1.0.0",
    "dotenv": "^16.3.1",
    "eslint": "^8.54.0",
    "pg": "^8.11.3",
    "tsup": "^8.0.0",
    "tsx": "^4.20.3",
    "typescript": "^5.3.0",
    "vitest": "^1.0.0"
  },
  "files": [
    "dist",
    "bin"
  ],
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    }
  }
}
